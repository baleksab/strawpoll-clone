// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace back.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.AdvancedSettings", b =>
                {
                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowComments")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditVotePermissions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideShareButton")
                        .HasColumnType("bit");

                    b.Property<string>("ResultVisibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VotingSecurity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PollId");

                    b.ToTable("AdvancedSettings");
                });

            modelBuilder.Entity("Entities.ImageSettings", b =>
                {
                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<bool>("RequireName")
                        .HasColumnType("bit");

                    b.Property<bool>("VotingSecurity")
                        .HasColumnType("bit");

                    b.HasKey("PollId");

                    b.ToTable("ImageSettings");
                });

            modelBuilder.Entity("Entities.MeetingSettings", b =>
                {
                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("CustomOptionLimits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FixedTimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideUnavailableOptions")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("OneOptionOnly")
                        .HasColumnType("bit");

                    b.HasKey("PollId");

                    b.ToTable("MeetingSettings");
                });

            modelBuilder.Entity("Entities.MultipleChoiceSettings", b =>
                {
                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<bool>("RequireName")
                        .HasColumnType("bit");

                    b.Property<bool>("VotingSecurity")
                        .HasColumnType("bit");

                    b.HasKey("PollId");

                    b.ToTable("MultipleChoiceSettings");
                });

            modelBuilder.Entity("Entities.Options", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("PollId");

                    b.ToTable("Options");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Options");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Poll", b =>
                {
                    b.Property<int>("PollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PollId"));

                    b.Property<bool>("AllowComments")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PollType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PollId");

                    b.ToTable("Polls");
                });

            modelBuilder.Entity("Entities.RankingSettings", b =>
                {
                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<bool>("BlockVpnUsers")
                        .HasColumnType("bit");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int");

                    b.Property<bool>("RandomOrder")
                        .HasColumnType("bit");

                    b.Property<bool>("RequireName")
                        .HasColumnType("bit");

                    b.Property<bool>("UseRecaptcha")
                        .HasColumnType("bit");

                    b.Property<int>("VotingSecurity")
                        .HasColumnType("int");

                    b.HasKey("PollId");

                    b.ToTable("RankingSettings");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("PollId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("VoteId");

                    b.HasIndex("OptionId");

                    b.HasIndex("PollId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Entities.ImageOption", b =>
                {
                    b.HasBaseType("Entities.Options");

                    b.Property<string>("OptionImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ImageOption");
                });

            modelBuilder.Entity("Entities.MeetingOption", b =>
                {
                    b.HasBaseType("Entities.Options");

                    b.Property<DateTime>("MeetingTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("MeetingOption");
                });

            modelBuilder.Entity("Entities.MultipleChoiceOption", b =>
                {
                    b.HasBaseType("Entities.Options");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MultipleChoiceOption");
                });

            modelBuilder.Entity("Entities.RankingOption", b =>
                {
                    b.HasBaseType("Entities.Options");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RankValue")
                        .HasColumnType("int");

                    b.ToTable("Options", t =>
                        {
                            t.Property("OptionText")
                                .HasColumnName("RankingOption_OptionText");
                        });

                    b.HasDiscriminator().HasValue("RankingOption");
                });

            modelBuilder.Entity("Entities.AdvancedSettings", b =>
                {
                    b.HasOne("Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Entities.ImageSettings", b =>
                {
                    b.HasOne("Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Entities.MeetingSettings", b =>
                {
                    b.HasOne("Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Entities.MultipleChoiceSettings", b =>
                {
                    b.HasOne("Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Entities.Options", b =>
                {
                    b.HasOne("Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Entities.RankingSettings", b =>
                {
                    b.HasOne("Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Entities.Vote", b =>
                {
                    b.HasOne("Entities.Options", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Poll");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
